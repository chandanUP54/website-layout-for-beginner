1) GET REQUEST--->> 

fetch('https://api.example.com/data', {
  method: 'GET', // Specifies the HTTP method
  headers: {
    'Content-Type': 'application/json', // Specifies the media type
    'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
  }
})
.then(response => response.json()) // Convert response to JSON
.then(data => {
  console.log('Data received:', data);
})
.catch(error => {
  console.error('Error:', error);
});


2) POST REQUEST -->

fetch('https://api.example.com/data', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
  },
  body: JSON.stringify({
    name: 'John Doe',
    email: 'john@example.com'
  }) // Convert JavaScript object to JSON string
})
.then(response => response.json())
.then(data => {
  console.log('Response received:', data);
})
.catch(error => {
  console.error('Error:', error);
});


3) PUT REQUEST -->>

fetch('https://api.example.com/data/123', { // Assume 123 is the resource ID
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
  },
  body: JSON.stringify({
    name: 'Jane Doe',
    email: 'jane@example.com'
  })
})
.then(response => response.json())
.then(data => {
  console.log('Update successful:', data);
})
.catch(error => {
  console.error('Error:', error);
});


4) DELETE REQUEST -->>

fetch('https://api.example.com/data/123', { // Assume 123 is the resource ID
  method: 'DELETE',
  headers: {
    'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
  }
})
.then(response => {
  if (response.ok) { // Check if the request was successful
    console.log('Deletion successful');
  } else {
    console.log('Deletion failed');
  }
})
.catch(error => {
  console.error('Error:', error);
});


----------------------------

handling blog-->> 

// Fetching as text
fetch('https://api.example.com/data')
  .then(response => response.text()) // Use .text() for plain text responses
  .then(text => {
    console.log('Text response:', text);
  })
  .catch(error => {
    console.error('Error:', error);
  });

// Fetching as a blob (e.g., for images or files)
fetch('https://api.example.com/image')
  .then(response => response.blob()) // Use .blob() for binary data
  .then(blob => {
    const url = URL.createObjectURL(blob);
    document.getElementById('image').src = url; // Assuming there's an <img> with id="image"
  })
  .catch(error => {
    console.error('Error:', error);
  });

========================================================================================================

ASYNC AND AWAIT ------->>>>

1)GET--->>> 

async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
      }
    });

    if (!response.ok) { // Check if the request was successful
      throw new Error('Network response was not ok');
    }

    const data = await response.json(); // Convert response to JSON
    console.log('Data received:', data);
  } catch (error) {
    console.error('Error:', error);
  }
}

fetchData();


2) POST --->>>

async function postData() {
  try {
    const response = await fetch('https://api.example.com/data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TOKEN' // Optional: If authentication is needed
      },
      body: JSON.stringify({
        name: 'John Doe',
        email: 'john@example.com'
      }) // Convert JavaScript object to JSON string
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const data = await response.json();
    console.log('Response received:', data);
  } catch (error) {
    console.error('Error:', error);
  }
}

postData();
----------------------